import 'package:bms_dart/blocs.dart';
import 'package:bms_dart/contract_list_bloc.dart';
import 'package:bms_dart/models.dart';
import 'package:bms_dart/work_list_bloc.dart';
import 'package:bms_flutter/translations.dart';
import 'package:bms_flutter_admin/src/screens/work_create_screen.dart';
// import 'package:bms_flutter_admin/src/screens/user_list_screen.dart';
import 'package:bms_flutter_admin/src/screens/work_update_screen.dart';
import 'package:flutter/material.dart';
//import 'package:bms_flutter/src/widgets/work_list.dart' as workList;
import 'package:bms_flutter/style.dart' as style;
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_packages/date_timer_picker.dart'
    as dateTimeDurationPicker;

import 'package:bms_flutter/widgets.dart';

import 'select_user_and_contract.dart';

class WorkListAdmin extends StatelessWidget {
  static Widget getListOfLocationWorks(
    BuildContext context,
    int locationId, {
    DateTime from,
    DateTime to,
  }) {
    return WorkListAdmin(
      showLocation: false,
      showUser: true,
      floatingActionButton: FloatingActionButton(
        heroTag: null,
        child: Icon(Icons.add),
        onPressed: () {
          Navigator.of(context).push(
            MaterialPageRoute(
              builder: (context) => WorkCreateScreen(
                locationId: locationId,
              ),
            ),
          );
        },
      ),
      from: from,
      to: to,
    );
  }

  static Widget getListOfUserWorks(
    BuildContext context,
    int userId, {
    DateTime from,
    DateTime to,
  }) {
    return WorkListAdmin(
      showLocation: true,
      showUser: false,
      from: from,
      to: to,
    );
  }

  final bool showUser;
  final bool showLocation;
  final DateTime from;
  final DateTime to;
  final Widget floatingActionButton;

  const WorkListAdmin({
    Key key,
    this.showUser = true,
    this.showLocation = true,
    this.from,
    this.to,
    this.floatingActionButton,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BlocListHalfScreen<WorkListBloc, WorkListEvent, ListState<Work>,
        Work>(
      builder: (context, bloc, state) {
        return WorkList(
          showUser: showUser,
          showLocation: showLocation,
          onSelect: (work) => _showManagerWorkDrawer(context, work),
          onSelectTime: (work) => registerWork(context, work),
          headerBuilder: from != null && to != null
              ? (context) {
                  return Padding(
                    padding: const EdgeInsets.all(16),
                    child: Text(
                      '${Translations.of(context).dateString(from)} - ${Translations.of(context).dateString(to)}',
                      style: TextStyle(
                        fontSize: 16,
                        color: Theme.of(context).primaryColor,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  );
                }
              : null,
        );
      },
      floatingActionButton: floatingActionButton,
    );
  }

  void _showManagerWorkDrawer(BuildContext context, Work work) {
    var bloc = BlocProvider.of<WorkListBloc>(context);
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return Container(
          height: 400,
          child: WorkListDrawer(
            bloc: bloc,
            work: work,
          ),
        );
      },
    );
  }
}

class WorkListDrawer extends StatefulWidget {
  final Work work;
  final WorkListBloc bloc;

  const WorkListDrawer({Key key, this.work, this.bloc}) : super(key: key);
  @override
  _WorkListDrawerState createState() => _WorkListDrawerState();
}

class _WorkListDrawerState extends State<WorkListDrawer> {
  @override
  Widget build(BuildContext context) {
    var work = widget.work;
    var bloc = widget.bloc;

    return BlocListener(
        bloc: bloc,
        listener: (BuildContext context, state) {
          setState(() {});
        },
        child: ListView(
          children: <Widget>[
            ListTile(
              title: Text(Translations.of(context).dateString(work.date)),
            ),
            IgnorePointer(child: WorkTile(work: work)),
            ListTile(
              title: Text(Translations.of(context).labelComment),
              subtitle: Text(work.note),
            ),
            ListTile(
              leading: Icon(Icons.edit),
              title: Text(Translations.of(context).titleUpdateWork),
              onTap: () {
                return Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (context) {
                      return WorkUpdateScreen(work: work);
                    },
                  ),
                );
              },
            ),
            if (work.isElegibleForRegistration)
              ListTile(
                leading: Icon(Icons.check),
                title: Text(Translations.of(context).optionRegisterWork),
                onTap: () {
                  registerWork(context, work);
                },
              ),
            if (work.isTaken && !work.isReplaced)
              ListTile(
                leading: Icon(Icons.remove_circle),
                title: Text(Translations.of(context).optionRemoveWorkUser),
                onTap: () => bloc.dispatch(WorkListRemoveUser(workId: work.id)),
              ),
            if (work.isReplaced)
              ListTile(
                leading: Icon(Icons.remove_circle_outline),
                title: Text(Translations.of(context).optionRemoveWorkReplacer),
                onTap: () =>
                    bloc.dispatch(WorkListRemoveReplacer(workId: work.id)),
              ),
            if (!work.isOwned && !work.isTaken)
              ListTile(
                leading: Icon(Icons.person),
                title: Text(Translations.of(context).optionFindWorkOwner),
                onTap: () async {
                  print('work.locationId: ${work.location.id}');
                  var userContract = await selectUserContract(context,
                      FetchAllOfLocation(locationId: work.location.id));
                  print('userContract: ${userContract.second.id}');
                  if (userContract != null) {
                    bloc.dispatch(WorkListAddUserContract(
                      work: work,
                      user: userContract.first,
                      contract: userContract.second,
                    ));
                  }
                },
              ),
            if (work.isOwned && !work.isTaken)
              ListTile(
                leading: Icon(Icons.person_outline),
                title: Text(Translations.of(context).optionFindWorkReplacer),
                onTap: () async {
                  var userContract = await selectUserContract(context,
                      FetchAllOfLocation(locationId: work.location.id));

                  if (userContract != null) {
                    bloc.dispatch(WorkListReplaceUserContract(
                      work: work,
                      user: userContract.first,
                      contract: userContract.second,
                    ));
                  }
                },
              ),
            ListTile(
              leading: Icon(Icons.arrow_back),
              title: Text(
                Translations.of(context).buttonBack,
                style: TextStyle(color: style.declineRed),
              ),
              onTap: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        ));
  }
}
