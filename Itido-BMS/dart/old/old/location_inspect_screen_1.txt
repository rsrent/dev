import 'package:bms_dart/accident_report_list_bloc.dart';
import 'package:bms_dart/blocs.dart';
import 'package:bms_dart/contract_list_bloc.dart';
import 'package:bms_dart/absence_list_bloc.dart';
import 'package:bms_dart/location_list_bloc.dart';
import 'package:bms_dart/models.dart';
import 'package:bms_dart/work_contract_list_bloc.dart';
import 'package:bms_dart/work_list_bloc.dart';
import 'package:bms_flutter_admin/src/widgets/absence_list_admin.dart';
import 'package:bms_flutter_admin/src/widgets/accident_report_list_admin.dart';
import 'package:bms_flutter_admin/src/widgets/contract_list_admin.dart';
import 'package:bms_flutter_admin/src/widgets/location_list_admin.dart';
import 'package:bms_flutter_admin/src/widgets/user_list_admin.dart';
import 'package:bms_flutter_admin/src/widgets/work_contract_list.dart';
import 'package:dart_packages/streamer.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'absence_update_screen.dart';
import 'contract_create_screen.dart';
import 'contract_update_screen.dart';
import '../widgets/work_list.dart';
import 'package:bms_flutter/widgets.dart';
import 'package:bms_flutter/translations.dart';

import 'package:bms_flutter/src/components/animated_stream_builder.dart';

class LocationInspectScreen extends StatefulWidget {
  static void showLocationInspectScreen(BuildContext context, int locationId,
      {int startIndex}) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) {
          return LocationInspectScreen(
              locationId: locationId, startIndex: startIndex);
        },
      ),
    );
  }

  final int locationId;
  final int startIndex;

  const LocationInspectScreen(
      {Key key, @required this.locationId, this.startIndex})
      : super(key: key);

  @override
  _LocationInspectScreenState createState() =>
      _LocationInspectScreenState(this.startIndex);
}

class _LocationInspectScreenState extends State<LocationInspectScreen> {
  final Streamer<int> currentTab;
  final PageStorageBucket bucket = PageStorageBucket();

  DateTime showWorkFromDate = DateTime.now().subtract(Duration(days: 2));
  DateTime showWorkToDate = DateTime.now().add(Duration(days: 30));

  _LocationInspectScreenState(int startIndex)
      : this.currentTab = Streamer(seedValue: startIndex ?? 0);

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      builder: (context) => LocationInspectBloc(widget.locationId)
        ..dispatch(LocationInspectEventFetch()),
      child: Builder(
        builder: (context) {
          var bloc = BlocProvider.of<LocationInspectBloc>(context);
          return AnimatedBlocBuilder(
            bloc: bloc,
            builder: (context, state) {
              if (state is LoadedLocationInspectState) {
                return _build(context, state.location);
              } else if (state is ErrorLocationInspectState) {
                return InfoScreen(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      Padding(
                        padding: const EdgeInsets.only(bottom: 24),
                        child: Text(
                          Translations.of(context).infoErrorLoading,
                          style: TextStyle(fontSize: 20),
                        ),
                      ),
                      RaisedButton(
                        child: Text(Translations.of(context).optionTryAgain),
                        onPressed: () {
                          bloc.dispatch(LocationInspectEventFetch());
                        },
                      ),
                    ],
                  ),
                );
              } else {
                return LoadingScreen();
              }
            },
          );
        },
      ),
    );
  }

  Widget _build(BuildContext context, Location location) {
    return BlocProviderTree(
      blocProviders: [
        BlocProvider<WorkListBloc>(
          builder: (context) => refreshWork(WorkListBloc()),
        ),
        BlocProvider<WorkContractListBloc>(
          builder: (context) => WorkContractListBloc()
            ..dispatch(
              WorkContractListFetchOfLocation(
                locationId: widget.locationId,
              ),
            ),
        ),
        BlocProvider<UserListBloc>(
          builder: (context) {
            return UserListBloc(
                () => FetchAllOfLocation(locationId: widget.locationId));
            // ..dispatch(FetchAllOfLocation(locationId: widget.location.id));
          },
        ),
      ],
      child: Scaffold(
        body: DefaultTabController(
          initialIndex: currentTab.value,
          length: 3,
          child: NestedScrollView(
            headerSliverBuilder: (BuildContext context, bool boxIsScrolled) {
              return [
                SliverAppBar(
                  pinned: true,
                  expandedHeight: 260,
                  flexibleSpace: FlexibleSpaceBar(
                    title: SizedBox(
                      width: MediaQuery.of(context).size.width * 0.6,
                      height: 60,
                      //color: Colors.red,
                      child: Center(
                        child: Text(
                          location.displayName,
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                          style: TextStyle(fontSize: 16),
                        ),
                      ),
                    ),
                    titlePadding: EdgeInsets.only(bottom: 46),
                    centerTitle: true,
                    collapseMode: CollapseMode.parallax,
                  ),
                  bottom: TabBar(
                    tabs: <Widget>[
                      Tab(text: Translations.of(context).buttonWork),
                      Tab(text: Translations.of(context).buttonWorkContracts),
                      Tab(text: Translations.of(context).buttonUsers),
                    ],
                    onTap: currentTab.update,
                  ),
                  actions: <Widget>[
                    IconButton(
                      icon: Icon(Icons.refresh),
                      onPressed: () {
                        BlocProvider.of<LocationInspectBloc>(context)
                            .dispatch(LocationInspectEventFetch());
                      },
                    )
                  ],
                ),
              ];
            },
            body: PageStorage(
              bucket: bucket,
              child: TabBarView(
                children: [
                  WorkListAdmin(
                    showLocation: false,
                    onRefresh: (bloc) => refreshWork(bloc),
                    headerBuilder: (context) {
                      return Padding(
                        padding: const EdgeInsets.all(16),
                        child: Text(
                          '${Translations.of(context).dateString(showWorkFromDate)} - ${Translations.of(context).dateString(showWorkToDate)}',
                          style: TextStyle(
                            fontSize: 16,
                            color: Theme.of(context).primaryColor,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      );
                    },
                  ),
                  AdminWorkContractList(
                    showLocation: false,
                    onRefresh: (bloc) => bloc.dispatch(
                      WorkContractListFetchOfLocation(
                        locationId: widget.locationId,
                      ),
                    ),
                  ),
                  UserListAdmin.getListOfLocationUserss(
                      context, widget.locationId),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  WorkListBloc refreshWork(WorkListBloc bloc) {
    bloc.dispatch(WorkListFetchOfLocation(
      locationId: widget.locationId,
      from: showWorkFromDate,
      to: showWorkToDate,
    ));
    return bloc;
  }
}
